[2/2] base: Introduce Accidental Touch

Accidental Touch is a feature useful for many, especially the gamers out there.
It prevents any sort of accidental touch on hardware buttons while
the touchscreen is in use.
This means you wonâ€™t experience any unexpected behaviour while playing games,
web browsing or even when attempting to reach your finger out to the edge of
that humongous display.

Original commit: https://github.com/AICP/frameworks_base/commit/5c957c5e1113922d24b7e4a877f9a097bf0ed8ff

project frameworks/base/
diff --git a/frameworks/base/core/java/android/provider/Settings.java b/frameworks/base/core/java/android/provider/Settings.java
index ffaffe14441..4ae805885f5 100644
--- a/frameworks/base/core/java/android/provider/Settings.java
+++ b/frameworks/base/core/java/android/provider/Settings.java
@@ -3061,6 +3061,13 @@ public final class Settings {
         };
 
         /**
+         * Indicates whether ANBI (Accidental navigation button interaction) is enabled.
+         *
+         * @hide
+         */
+        public static final String ANBI_ENABLED = "anbi_enabled";
+
+        /**
          * Appended to various volume related settings to record the previous
          * values before they the settings were affected by a silent/vibrate
          * ringer mode change.
diff --git a/frameworks/base/core/java/android/view/InputDevice.java b/frameworks/base/core/java/android/view/InputDevice.java
index 061777eef83..bd61a6001fc 100644
--- a/frameworks/base/core/java/android/view/InputDevice.java
+++ b/frameworks/base/core/java/android/view/InputDevice.java
@@ -293,6 +293,15 @@ public final class InputDevice implements Parcelable {
     public static final int SOURCE_HDMI = 0x02000000 | SOURCE_CLASS_BUTTON;
 
     /**
+     * The input source is a specific virtual event sent from navigation bar.
+     *
+     * @see com.android.systemui.statusbar.policy.KeyButtonView#sendEvent()
+     * @author Carlo Savignano
+     * @hide
+     */
+    public static final int SOURCE_NAVIGATION_BAR = 0x04000000 | SOURCE_CLASS_BUTTON;
+
+    /**
      * A special input source constant that is used when filtering input devices
      * to match devices that provide any type of input source.
      */
diff --git a/frameworks/base/services/core/java/com/android/server/policy/ANBIHandler.java b/frameworks/base/services/core/java/com/android/server/policy/ANBIHandler.java
new file mode 100644
index 00000000000..e0d8ae78662
--- /dev/null
+++ b/frameworks/base/services/core/java/com/android/server/policy/ANBIHandler.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2017, ParanoidAndroid Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server.policy;
+
+import android.content.Context;
+import android.util.Log;
+import android.view.MotionEvent;
+import android.view.WindowManagerPolicy.PointerEventListener;
+
+public class ANBIHandler implements PointerEventListener {
+
+    private static final String TAG = ANBIHandler.class.getSimpleName();
+    private static final boolean DEBUG = false;
+
+    private boolean mScreenTouched;
+
+    private Context mContext;
+
+    public ANBIHandler(Context context) {
+        mContext = context;
+    }
+
+    @Override
+    public void onPointerEvent(MotionEvent event) {
+        int action = event.getActionMasked();
+        switch (action) {
+            case MotionEvent.ACTION_DOWN:
+            case MotionEvent.ACTION_MOVE:
+            case MotionEvent.ACTION_POINTER_DOWN:
+                mScreenTouched = true;
+                break;
+            default:
+                mScreenTouched = false;
+                break;
+        }
+        if (DEBUG) {
+            Log.d(TAG, "Screen touched= " + mScreenTouched);
+        }
+    }
+
+    public boolean isScreenTouched() {
+        if (DEBUG) {
+            Log.d(TAG, "isScreenTouched: mScreenTouched= " + mScreenTouched);
+        }
+        return mScreenTouched;
+    }
+}
diff --git a/frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java b/frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java
index 57d0a01397a..964f3c4dd18 100644
--- a/frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java
+++ b/frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java
@@ -402,6 +402,10 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     BurnInProtectionHelper mBurnInProtectionHelper;
     AppOpsManager mAppOpsManager;
     AlarmManager mAlarmManager;
+    ANBIHandler mANBIHandler;
+
+    private boolean mANBIEnabled;
+
     private boolean mHasFeatureWatch;
 
     // Vibrator pattern for haptic feedback of a long press.
@@ -1117,6 +1121,9 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             resolver.registerContentObserver(CMSettings.System.getUriFor(
                     CMSettings.System.NAVBAR_LEFT_IN_LANDSCAPE), false, this,
                     UserHandle.USER_ALL);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.ANBI_ENABLED), false, this,
+                    UserHandle.USER_ALL);
             updateSettings();
         }
 
@@ -2587,6 +2594,20 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                             MSG_ENABLE_POINTER_LOCATION : MSG_DISABLE_POINTER_LOCATION);
                 }
             }
+
+            final boolean ANBIEnabled = Settings.System.getIntForUser(resolver,
+                    Settings.System.ANBI_ENABLED, 0, UserHandle.USER_CURRENT) == 1;
+            if (mANBIHandler != null) {
+                if (mANBIEnabled != ANBIEnabled) {
+                    mANBIEnabled = ANBIEnabled;
+                    if (mANBIEnabled) {
+                        mWindowManagerFuncs.registerPointerEventListener(mANBIHandler);
+                    } else {
+                        mWindowManagerFuncs.unregisterPointerEventListener(mANBIHandler);
+                    }
+                }
+            }
+
             // use screen off timeout setting as the timeout for the lockscreen
             mLockScreenTimeout = Settings.System.getIntForUser(resolver,
                     Settings.System.SCREEN_OFF_TIMEOUT, 0, UserHandle.USER_CURRENT);
@@ -6478,9 +6499,16 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         final boolean canceled = event.isCanceled();
         final int keyCode = event.getKeyCode();
         final int scanCode = event.getScanCode();
+        final int source = event.getSource();

         final boolean isInjected = (policyFlags & WindowManagerPolicy.FLAG_INJECTED) != 0;

+        final boolean appSwitchKey = keyCode == KeyEvent.KEYCODE_APP_SWITCH;
+        final boolean homeKey = keyCode == KeyEvent.KEYCODE_HOME;
+        final boolean menuKey = keyCode == KeyEvent.KEYCODE_MENU;
+        final boolean backKey = keyCode == KeyEvent.KEYCODE_BACK;
+        final boolean navBarKey = source == InputDevice.SOURCE_NAVIGATION_BAR;
+
         // If screen is off then we treat the case where the keyguard is open but hidden
         // the same as if it were open and in front.
         // This will prevent any keys other than the power button from waking the screen
@@ -6490,6 +6518,11 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                                                 isKeyguardShowingAndNotOccluded() :
                                                 mKeyguardDelegate.isShowing()));

+        if (mANBIHandler != null && mANBIEnabled && mANBIHandler.isScreenTouched()
+                && !navBarKey && (appSwitchKey || homeKey || menuKey || backKey)) {
+            return 0;
+        }
+
         if (DEBUG_INPUT) {
             Log.d(TAG, "interceptKeyTq keycode=" + keyCode
                     + " interactive=" + interactive + " keyguardActive=" + keyguardActive
@@ -8027,6 +8060,8 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         // CMHardwareService to be up and running
         mSettingsObserver.observe();

+        mANBIHandler = new ANBIHandler(mContext);
+
         readCameraLensCoverState();
         updateUiMode();
         boolean bindKeyguardNow;
